name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      continue-on-error: true

    - name: Build C++ components (Ubuntu/macOS)
      if: runner.os != 'Windows'
      run: make
      continue-on-error: true

    - name: Build C++ components (Windows)
      if: runner.os == 'Windows'
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        build_vs.bat
      shell: cmd
      continue-on-error: true

    - name: Run linter
      run: npm run lint
      continue-on-error: true

    - name: Run Node.js tests
      run: npm test

    - name: Run Python tests
      run: python -m pytest tests/
      continue-on-error: true

    - name: Run performance benchmarks
      run: python src/benchmark_assembler.py
      continue-on-error: true

    - name: Test MCP integration
      run: |
        timeout 10s node src/fileforge.cjs || true
      shell: bash

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
      continue-on-error: true

    - name: Run Node.js security audit
      run: npm audit --audit-level moderate || true
      continue-on-error: true

    - name: Run Python security audit
      run: |
        pip install safety
        safety check --ignore 58755 || true
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt

    - name: Build project
      run: |
        make
        npm run docs

    - name: Create release package
      run: |
        mkdir -p dist
        tar -czf dist/fileforge-${{ github.sha }}.tar.gz \
          src/ docs/ examples/ \
          README.md LICENSE CHANGELOG.md INSTALL.md \
          package.json requirements.txt Makefile build_vs.bat

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fileforge-${{ github.sha }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          fileforge-*/fileforge-*.tar.gz
        body: |
          ## FileForge ${{ github.ref_name }}
          
          ### üöÄ Features
          - Advanced MCP server for file operations
          - 17 powerful tools for file management
          - Optimized performance with C++ components
          - Vector embeddings for semantic file search
          - Multi-level error protection and rollback
          
          ### üì¶ Installation
          ```bash
          # Extract release
          tar -xzf fileforge-*.tar.gz
          cd fileforge
          
          # Install dependencies
          npm install
          pip install -r requirements.txt
          
          # Build C++ components
          make  # or build_vs.bat on Windows
          ```
          
          ### üîß Configuration
          See [INSTALL.md](INSTALL.md) for detailed setup instructions.
          
          ### üìñ Documentation
          - [README.md](README.md) - Overview and quick start
          - [DEVELOPER_GUIDE.md](docs/DEVELOPER_GUIDE.md) - Development guide
          - [API Examples](examples/) - Usage examples
          
          ### üêõ Known Issues
          None reported for this release.
          
          ### üíù Thanks
          Special thanks to all contributors and the MCP community!
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Check for Docker credentials
      id: docker-check
      run: |
        if [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
          echo "credentials-available=true" >> $GITHUB_OUTPUT
        else
          echo "credentials-available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Docker Hub credentials not configured. Skipping Docker push."
        fi

    - name: Login to DockerHub
      if: steps.docker-check.outputs.credentials-available == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image (without push)
      if: steps.docker-check.outputs.credentials-available == 'false'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          fileforge/fileforge:latest
          fileforge/fileforge:${{ github.sha }}
        platforms: linux/amd64,linux/arm64

    - name: Build and push Docker image
      if: steps.docker-check.outputs.credentials-available == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/fileforge:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/fileforge:${{ github.sha }}
        platforms: linux/amd64,linux/arm64