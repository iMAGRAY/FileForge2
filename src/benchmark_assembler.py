#!/usr/bin/env python3
"""
‚ö° BENCHMARK ASSEMBLER - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–µ–∂–¥—É assembler –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏
"""

import os
import time
import json
import subprocess
import tempfile
import psutil
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np

class AssemblerBenchmark:
    def __init__(self):
        self.assembler_path = "./file_assembler.exe"
        self.test_dir = Path("./benchmark_tests")
        self.test_dir.mkdir(exist_ok=True)
        
    def generate_test_file(self, size_kb: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        content = "Hello World!\n" * (size_kb * 1024 // 13)  # ~13 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫—É
        test_file = self.test_dir / f"test_{size_kb}kb.txt"
        
        with open(test_file, 'w') as f:
            f.write(content)
        
        return str(test_file)
    
    def benchmark_read_operation(self, file_path: str) -> dict:
        """–ë–µ–Ω—á–º–∞—Ä–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è"""
        # –¢–µ—Å—Ç assembler —á—Ç–µ–Ω–∏—è
        start_time = time.perf_counter()
        try:
            result = subprocess.run([
                self.assembler_path, 
                "read", 
                json.dumps({"filepath": file_path})
            ], capture_output=True, text=True, timeout=30)
            
            assembler_time = time.perf_counter() - start_time
            assembler_result = json.loads(result.stdout) if result.stdout else None
            assembler_success = assembler_result and assembler_result.get("success", False)
        except Exception as e:
            assembler_time = float('inf')
            assembler_success = False
            assembler_result = {"error": str(e)}
        
        # –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        start_time = time.perf_counter()
        try:
            with open(file_path, 'r') as f:
                content = f.read()
            standard_time = time.perf_counter() - start_time
            standard_success = True
        except Exception as e:
            standard_time = float('inf')
            standard_success = False
        
        return {
            "assembler": {
                "time": assembler_time,
                "success": assembler_success,
                "performance_mb_sec": assembler_result.get("performance_MB_per_sec", 0) if assembler_result else 0
            },
            "standard": {
                "time": standard_time,
                "success": standard_success
            },
            "speedup": standard_time / assembler_time if assembler_time > 0 else 0
        }
    
    def benchmark_write_operation(self, content: str) -> dict:
        """–ë–µ–Ω—á–º–∞—Ä–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏"""
        assembler_file = self.test_dir / "assembler_write_test.txt"
        standard_file = self.test_dir / "standard_write_test.txt"
        
        # –¢–µ—Å—Ç assembler –∑–∞–ø–∏—Å–∏
        start_time = time.perf_counter()
        try:
            result = subprocess.run([
                self.assembler_path,
                "write",
                json.dumps({"filepath": str(assembler_file), "content": content})
            ], capture_output=True, text=True, timeout=30)
            
            assembler_time = time.perf_counter() - start_time
            assembler_result = json.loads(result.stdout) if result.stdout else None
            assembler_success = assembler_result and assembler_result.get("success", False)
        except Exception as e:
            assembler_time = float('inf')
            assembler_success = False
            assembler_result = {"error": str(e)}
        
        # –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        start_time = time.perf_counter()
        try:
            with open(standard_file, 'w') as f:
                f.write(content)
            standard_time = time.perf_counter() - start_time
            standard_success = True
        except Exception as e:
            standard_time = float('inf')
            standard_success = False
        
        # –û—á–∏—Å—Ç–∫–∞
        for f in [assembler_file, standard_file]:
            if f.exists():
                f.unlink()
        
        return {
            "assembler": {
                "time": assembler_time,
                "success": assembler_success,
                "performance_mb_sec": assembler_result.get("performance_MB_per_sec", 0) if assembler_result else 0
            },
            "standard": {
                "time": standard_time,
                "success": standard_success
            },
            "speedup": standard_time / assembler_time if assembler_time > 0 else 0
        }
    
    def run_comprehensive_benchmark(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if not os.path.exists(self.assembler_path):
            print(f"‚ùå Assembler –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.assembler_path}")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make all' –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            return {}
        
        file_sizes = [1, 10, 100, 1000, 5000]  # KB
        results = {
            "read_benchmarks": [],
            "write_benchmarks": [],
            "system_info": {
                "cpu_count": psutil.cpu_count(),
                "memory_gb": psutil.virtual_memory().total / (1024**3),
                "cpu_freq_mhz": psutil.cpu_freq().max if psutil.cpu_freq() else "Unknown"
            }
        }
        
        print(f"üíª –°–∏—Å—Ç–µ–º–∞: {results['system_info']['cpu_count']} CPU, {results['system_info']['memory_gb']:.1f}GB RAM")
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ —á—Ç–µ–Ω–∏—è
        print("\nüìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è...")
        for size_kb in file_sizes:
            print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {size_kb}KB...")
            test_file = self.generate_test_file(size_kb)
            
            # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ 3 –∑–∞–ø—É—Å–∫–∞–º
            read_times = []
            for _ in range(3):
                benchmark_result = self.benchmark_read_operation(test_file)
                read_times.append(benchmark_result)
            
            # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            avg_result = {
                "file_size_kb": size_kb,
                "assembler_avg_time": np.mean([r["assembler"]["time"] for r in read_times]),
                "standard_avg_time": np.mean([r["standard"]["time"] for r in read_times]),
                "avg_speedup": np.mean([r["speedup"] for r in read_times]),
                "assembler_performance_mb_sec": np.mean([r["assembler"]["performance_mb_sec"] for r in read_times])
            }
            results["read_benchmarks"].append(avg_result)
            
            print(f"     Speedup: {avg_result['avg_speedup']:.2f}x, {avg_result['assembler_performance_mb_sec']:.1f} MB/s")
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–ø–∏—Å–∏
        print("\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏...")
        for size_kb in file_sizes:
            print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {size_kb}KB...")
            test_content = "Test content line\n" * (size_kb * 1024 // 18)
            
            # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ 3 –∑–∞–ø—É—Å–∫–∞–º
            write_times = []
            for _ in range(3):
                benchmark_result = self.benchmark_write_operation(test_content)
                write_times.append(benchmark_result)
            
            avg_result = {
                "file_size_kb": size_kb,
                "assembler_avg_time": np.mean([r["assembler"]["time"] for r in write_times]),
                "standard_avg_time": np.mean([r["standard"]["time"] for r in write_times]),
                "avg_speedup": np.mean([r["speedup"] for r in write_times]),
                "assembler_performance_mb_sec": np.mean([r["assembler"]["performance_mb_sec"] for r in write_times])
            }
            results["write_benchmarks"].append(avg_result)
            
            print(f"     Speedup: {avg_result['avg_speedup']:.2f}x, {avg_result['assembler_performance_mb_sec']:.1f} MB/s")
        
        return results
    
    def generate_benchmark_report(self, results: dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–Ω—á–º–∞—Ä–∫—É"""
        if not results:
            return
        
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ASSEMBLER –ü–†–û–ì–†–ê–ú–ú–´")
        print("="*60)
        
        # –ß—Ç–µ–Ω–∏–µ
        print("\nüìñ –û–ü–ï–†–ê–¶–ò–ò –ß–¢–ï–ù–ò–Ø:")
        print("Size (KB) | Assembler (ms) | Standard (ms) | Speedup | MB/s")
        print("-" * 60)
        for r in results["read_benchmarks"]:
            print(f"{r['file_size_kb']:8} | {r['assembler_avg_time']*1000:13.2f} | {r['standard_avg_time']*1000:12.2f} | {r['avg_speedup']:6.2f}x | {r['assembler_performance_mb_sec']:5.1f}")
        
        # –ó–∞–ø–∏—Å—å
        print("\n‚úèÔ∏è –û–ü–ï–†–ê–¶–ò–ò –ó–ê–ü–ò–°–ò:")
        print("Size (KB) | Assembler (ms) | Standard (ms) | Speedup | MB/s")
        print("-" * 60)
        for r in results["write_benchmarks"]:
            print(f"{r['file_size_kb']:8} | {r['assembler_avg_time']*1000:13.2f} | {r['standard_avg_time']*1000:12.2f} | {r['avg_speedup']:6.2f}x | {r['assembler_performance_mb_sec']:5.1f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        read_speedups = [r['avg_speedup'] for r in results["read_benchmarks"]]
        write_speedups = [r['avg_speedup'] for r in results["write_benchmarks"]]
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è: {np.mean(read_speedups):.2f}x")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è: {max(read_speedups):.2f}x")
        print(f"–°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {np.mean(write_speedups):.2f}x")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {max(write_speedups):.2f}x")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
        report_file = self.test_dir / "benchmark_report.json"
        with open(report_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.test_dir.exists():
            for file in self.test_dir.iterdir():
                if file.is_file():
                    file.unlink()
            print(f"üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    benchmark = AssemblerBenchmark()
    
    try:
        results = benchmark.run_comprehensive_benchmark()
        benchmark.generate_benchmark_report(results)
        
        print("\nüéâ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
    finally:
        benchmark.cleanup()

if __name__ == "__main__":
    main() 